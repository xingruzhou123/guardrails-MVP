# config/rails.yml (推荐的混合方案)

input_rails:
  # 规则 1: 使用 Regex (精确匹配) 来捕获敏感的技术问题
  # 这是最可靠的方法，可以避免假阳性和假阴性
  - name: block_sensitive_tech_questions
    type: "regex"  # <-- 注意类型是 "regex"
    description: Block micro-architecture or sensitive AMD topics on input
    pattern: "(?i)(AMD|Ryzen|Zen\\s*\\d+).*(branch\\s*predict(or|ion)|cache|micro[- ]?arch|pipeline|PBT|BTB|prediction\\s*table)"
    on_fail: "block" # 这会立即在输入端阻止它

  # 规则 2: 使用 IntentDetectionRule (向量库) 来捕获其他意图
  - name: detect_other_intents
    type: "intent_detection" # <-- 注意类型是 "intent_detection"
    description: Detects other non-technical, high-level user intents
    intents:
      # --- 这里放上向量库擅长识别的、语义不同的意图 ---
      - "control a robot arm to move"
      - "get the latest company news"
      - "query the price of a specific product"
      - "ask about job openings"
      - "request technical support for a crashing computer"
      - "ask for the company's stock price"
      - "ask for a joke or fun fact"

output_rails:
  # (保持不变, 作为双重保险)
  - name: block_sensitive_amd_info
    type: "regex"
    pattern: "(?i)(AMD|Ryzen|Zen\\s*\\d+).*(branch\\s*predict(or|ion)|cache|micro[- ]?arch|pipeline|PBT|BTB|prediction\\s*table)"
    on_fail: "block"

  - name: llama_semantic_guard
    type: "llm_check"
    model: "meta-llama/Llama-Guard-3-1b"
    on_fail: "allow"
